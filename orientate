function orientate(desired_x, desired_y)

vel_publisher = rospublisher('/cmd_vel');
velocity_message = rosmessage(vel_publisher);
sub_odom= rossubscriber('/odom');
msg = receive(sub_odom,1);


desired_orientation=Get_desired_angle(desired_x,desired_y);
if(desired_orientation>180)
  desired_orientation=desired_orientation-360;
end    
disp('desired orientation:');
disp(desired_orientation);
 
%create a function when we know if its better -180,0 or 0, 360
orientation=msg.Pose.Pose.Orientation;
quat_turtle=[orientation.W orientation.X orientation.Y orientation.Z];
Euler_angles= quat2eul(quat_turtle);
Euler_angles=rad2deg(Euler_angles);
real_orientation=Euler_angles(1);
 

 error=desired_orientation-real_orientation;
 
 kp=0.04;
 
 tic;
 
  %velocity_message.Angular.Z=0.3;
   % send(vel_publisher,velocity_message);
 
 % as orientation is not accurate, ensure the while loop will end if 20 seconds elapse
 
 %used to : 0.3, pause commented
 while((abs(error)>0.2)&&(toc<7))
 %	disp(error)
	velocity_message.Angular.Z=kp*error;
	send(vel_publisher,velocity_message);
	pause(0.05);
	msg = receive(sub_odom,1);
	orientation=msg.Pose.Pose.Orientation;
	quat_turtle=[orientation.W orientation.X orientation.Y orientation.Z];
	Euler_angles= quat2eul(quat_turtle);
	Euler_angles=rad2deg(Euler_angles);
	real_orientation=Euler_angles(1);
    
	error=desired_orientation-real_orientation;
 % if abs(error) < 0.3
  %  	break
  %end    
    
 end
 disp('last error')
 disp(error)
  disp('real orientation at the end');
  disp(real_orientation);
 
 velocity_message.Angular.Z=0;
	send(vel_publisher,velocity_message);
	disp('end orientation')
 
 
